/** @author
Long Project LP3: Multi-dimensional search
 * Sreeram Chittela - sxc180025
 */
package sxc180025;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;


public class MDS {
	// Adding fields of MDS here
	HashMap<Long,ArrayList<Long>> idandDescMap= new HashMap<Long,ArrayList<Long>>();
	HashMap<Long,Money> idandPriceMap = new HashMap<Long,Money>();
	TreeMap<Long,LinkedList<Long>> tree1 = new TreeMap<Long,LinkedList<Long>>();

	// Constructors
	public MDS() {

	}

	/* Public methods of MDS.
       __________________________________________________________________
       a. Insert(id,price,list): insert a new item whose description is given
       in the list.  If an entry with the same id already exists, then its
       description and price are replaced by the new values, unless list
       is null or empty, in which case, just the price is updated. 
       Returns 1 if the item is new, and 0 otherwise.
	 */
	public int insert(long id, Money price, java.util.List<Long> list) {
		int isExists = checkIfIdExists(id); 
		updateTree(isExists,id,list);
		updateidandPrice(id,price);
		updateidandDesc(id,list);
		return isExists;
	}
	int checkIfIdExists(long id) {
		if((tree1.get(id) == null) && (idandPriceMap.get(id) == null))
			return 1;
		else
			return 0;
	}
	void updateTree(int isEXists,long id,List<Long> list) {
		LinkedList<Long> desc = tree1.get(id);
		LinkedList<Long> l1 = new LinkedList<Long>();
		for(int k=0;k<list.size();k++) {
			if(!(l1.contains(list.get(k)))) {
				l1.add(list.get(k));
			}
		}
		
		if(tree1.get(id) == null) {
			tree1.put(id, l1);
		}
		else {
			if(l1.size() !=0) {
				for(int i=0;i<desc.size();i++) {
					deleteFromidandDescMap(id,desc.get(i));
				}    		
				tree1.replace(id, l1);         //.put(id, l1);
			}       	
		}
	}
	void updateidandPrice(long id,Money price) {
    	if(idandPriceMap.get(id) == null)
    		idandPriceMap.put(id, price);
		else
			idandPriceMap.replace(id, price);
	}
	void updateidandDesc(long id,List<Long> desc) {
		for(int i=0;i<desc.size();i++) {
			if(idandDescMap.get(desc.get(i))==null) {
				ArrayList<Long> arr = new ArrayList<>();
				arr.add(id);
				idandDescMap.put(desc.get(i), arr);
			} else {
				ArrayList<Long> arr = idandDescMap.get(desc.get(i));
				if(!(arr.contains(id))) {
					arr.add(id);
					idandDescMap.replace(desc.get(i), arr);
				}
				idandDescMap.replace(desc.get(i), arr);
			}
		}
	}

	// b. Find(id): return price of item with given id (or 0, if not found).
	public Money find(long id) {
		if((idandPriceMap.get(id) == null)&&(tree1.get(id) == null))
			return new Money();
		else {
			return idandPriceMap.get(id); 
		}
	}

	/* 
       c. Delete(id): delete item from storage.  Returns the sum of the
       long ints that are in the description of the item deleted,
       or 0, if such an id did not exist.
	 */
	public long delete(long id) {
		return deleteIdfromTree(id);
	}
	int deleteIdfromTree(long id) {
		if((tree1.get(id)==null) && (idandPriceMap.get(id) == null)) {
			return 0; //Indicates that the node isn't in the tree.
		} else {
			deleteFromidandPriceMap(id);
			List<Long> desc = tree1.get(id);
			int descSum = 0;
			for(int i=0;i<desc.size();i++) {
				descSum += desc.get(i);
				deleteFromidandDescMap(id,desc.get(i));
			}
			tree1.remove(id);
			return descSum;
		}
	}
	void deleteFromidandPriceMap(long id) {
		idandPriceMap.remove(id);
	}
	void deleteFromidandDescMap(long id,Long desc) {
		ArrayList<Long> arr = idandDescMap.get(desc);
		if(arr != null && arr.contains(id)) {
			arr.remove(id);
		}
		if(arr.size() == 0) {
			idandDescMap.remove(desc);
		} else {
			idandDescMap.replace(desc, arr);
		}
	}

	/* 
       d. FindMinPrice(n): given a long int, find items whose description
       contains that number (exact match with one of the long ints in the
       item's description), and return lowest price of those items.
       Return 0 if there is no such item.
	 */
	public Money findMinPrice(long n) {
		if(idandDescMap.get(n) == null) {
			return new Money();
		} else {
			ArrayList<Long> ids = idandDescMap.get(n);
			Money minPrice = idandPriceMap.get(ids.get(0));
			for(int i=1;i<ids.size();i++) {
				Money price = idandPriceMap.get(ids.get(i));
				if(minPrice.compareTo(price) == 1) {
					minPrice = price;
				}
			}
			return minPrice;
		}   	
	}

	/* 
       e. FindMaxPrice(n): given a long int, find items whose description
       contains that number, and return highest price of those items.
       Return 0 if there is no such item.
	 */
	public Money findMaxPrice(long n) {
		if(idandDescMap.get(n) == null) {
			return new Money();
		} else {
			ArrayList<Long> ids = idandDescMap.get(n);
				Money maxPrice = idandPriceMap.get(ids.get(0));
				for(int i=1;i<ids.size();i++) {
					Money price = idandPriceMap.get(ids.get(i));
					if(maxPrice.compareTo(price) == 0) {
						maxPrice = price;
					}
				}
				return maxPrice;
		}
	}

	/* 
       f. FindPriceRange(n,low,high): given a long int n, find the number
       of items whose description contains n, and in addition,
       their prices fall within the given range, [low, high].
	 */
	public int findPriceRange(long n, Money low, Money high) {
		int count = 0;
		if(idandDescMap.get(n) == null) {
			return 0;
		} else {
			ArrayList<Long> ids = idandDescMap.get(n);
			for(int i=0;i<ids.size();i++) 
			{
				Money price = idandPriceMap.get(ids.get(i));
				int check = price.compareTo(low);
				int check2 = price.compareTo(high);
				if((check==1 && check2 == 0) || (check==0 && (price.dollars()==low.dollars() && price.cents() == low.cents()) ))
				{
					count = count + 1;
				}
			}
			return count;
			
		}		
	}

	/* 
       g. PriceHike(l,h,r): increase the price of every product, whose id is
       in the range [l,h] by r%.  Discard any fractional pennies in the new
       prices of items.  Returns the sum of the net increases of the prices.
	 */
	public Money priceHike(long l, long h, double rate) {
		SortedMap<Long, LinkedList<Long>> rangeTree = tree1.subMap(l,true,h,true);
		long sum_of_increment = 0;
		for(Map.Entry<Long,LinkedList<Long>> entry : rangeTree.entrySet()) {
			Long key = entry.getKey();
			Money price = idandPriceMap.get(key);
			long dollars = price.d;
			int cents = price.c;
			long total_money = (dollars*100)+cents;
			//This is the actual money in the float format.
			//Increasing the price by the given rate now...
			//Double increase_rate = (rate)*total_money;
			//Double increase_money = increase_rate/100;
			long hike = (long) (Math.floor(total_money*rate)/100);
			long priceHike = hike;//.longValue();
			long new_money = total_money+priceHike;
			//Converting new money to the MONEY class format.
			long new_dollars = new_money/100;
			int new_cents = (int) (new_money%100);
			sum_of_increment = sum_of_increment + priceHike; //net increase per item.		
			Money newPrice = new Money(new_dollars,new_cents);
			idandPriceMap.replace(key, newPrice);    
		}
		//DecimalFormat df = new DecimalFormat("0.00");
		//df.setRoundingMode(RoundingMode.DOWN);
		//String netIncrease = df.format(sum_of_increment);
		long newD = sum_of_increment/100;
		int newC  = (int) (sum_of_increment%100);
		Money netChange = new Money(newD,newC);
		return netChange;
	}

	/*
      h. RemoveNames(id, list): Remove elements of list from the description of id.
      It is possible that some of the items in the list are not in the
      id's description.  Return the sum of the numbers that are actually
      deleted from the description of id.  Return 0 if there is no such id.
	 */
	public long removeNames(long id, java.util.List<Long> list) 
    {
    	long deleted = 0;
    	LinkedList<Long> arr = tree1.get(id);
    	for(int j=0;j<list.size();j++)
    	{
    		if(arr.contains(list.get(j))) {
    			ArrayList<Long> Corresponding_ids= idandDescMap.get(list.get(j));
    			if(Corresponding_ids.contains(id)) {
        			Corresponding_ids.remove(id);
        		}
        		if(Corresponding_ids.size() == 0) {
        			idandDescMap.remove(list.get(j));
        		} else {
        			idandDescMap.replace(list.get(j), Corresponding_ids);
        		}        		
    			arr.remove(list.get(j));
    			deleted = deleted + list.get(j);
    		}
     	}
    	tree1.replace(id, arr);   	
    	return deleted;
    }

	// Do not modify the Money class in a way that breaks LP3Driver.java
	public static class Money implements Comparable<Money> { 
		long d;  int c;
		public Money() { d = 0; c = 0; }
		public Money(long d, int c) { this.d = d; this.c = c; }
		public Money(String s) {
			String[] part = s.split("\\.");
			int len = part.length;
			if(len < 1) { d = 0; c = 0; }
			else if(part.length == 1) { d = Long.parseLong(s);  c = 0; }
			else { d = Long.parseLong(part[0]);  c = Integer.parseInt(part[1]); }
		}
		public long dollars() { return d; }
		public int cents() { return c; }
		public int compareTo(Money other) { // Complete this, if needed
			if(this.d > other.d)
				return 1;
			else if(this.d < other.d)
				return 0;
			else {
				if(this.c>other.c)
					return 1;
				else
					return 0;
			}
		}
		public int isEqual(Money other) {
			if(this.d == other.d && this.c == other.c)
				return 1;
			else
				return 0;
		}
		public String toString() {
			String cents = "0";
			if(c<10) {
				cents = cents + c;
				return d + "." + cents;
			}
			return d + "." + c;
		}
		
	}

}
